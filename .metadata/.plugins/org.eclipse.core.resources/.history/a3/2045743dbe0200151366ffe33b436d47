import javax.swing.*;

import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;


/**
 * TODO Write a one-sentence summary of your class here. TODO Follow it with
 * additional details about its purpose, what abstraction it represents, and how
 * to use it.
 *
 * @author jessicajiang
 * @version May 11, 2015
 * @author Period: TODO
 * @author Assignment: 1APCSfinalproject
 *
 * @author Sources: TODO
 */
public class MainScene extends JPanel
{
    private static final Color BG_COLOR = Color.BLACK;
    //background color of playing screen
    private static final String FONT_NAME = "Questrial";
    //font of the numbers of the tiles
     
   
    boolean myWin = false;
    boolean myLose = false;
    int myScore = 0;

    public MainScene()
    {
        setFocusable( true ); //focusable flag indicates whether a component 
        //can gain the focus if it is requested to do so
        
        addKeyListener( new KeyAdapter()
        {
            public void keyPressed( KeyEvent e )
            {
                if ( e.getKeyCode() == KeyEvent.VK_ESCAPE )
                {
                    resetGame();
                }
                if ( !canMove() )
                {
                    myLose = true;
                }

                if ( !myWin && !myLose )
                {
                    switch ( e.getKeyCode() )
                    {
                        case KeyEvent.VK_LEFT:
                            left();
                            break;
                        case KeyEvent.VK_RIGHT:
                            right();
                            break;
                        case KeyEvent.VK_DOWN:
                            down();
                            break;
                        case KeyEvent.VK_UP:
                            up();
                            break;
                    }
                }

                if ( !myWin && !canMove() )
                {
                    myLose = true;
                }

                repaint();
            }
        } );
        resetGame();
    }


    public void resetGame( Tile[] myTiles )
    {
        myScore = 0;
        myWin = false;
        myLose = false;
        myTiles = new Tile[4 * 4];
        for ( int i = 0; i < myTiles.length; i++ )
        {
            myTiles[i] = new Tile();
        }
        addTile();
        addTile();
    }


    
 
    



    
    
    private void drawTile( Graphics g2, Tile tile, int x, int y )
    {
        Graphics2D g = ( (Graphics2D)g2 );
        g.setRenderingHint( RenderingHints.KEY_ANTIALIASING,
            RenderingHints.VALUE_ANTIALIAS_ON );
        g.setRenderingHint( RenderingHints.KEY_STROKE_CONTROL,
            RenderingHints.VALUE_STROKE_NORMALIZE );
        int value = tile.value;
        int xOffset = offsetCoors( x );
        int yOffset = offsetCoors( y );
        g.setColor( tile.getBackground() );
        g.fillRoundRect( xOffset, yOffset, TILE_SIZE, TILE_SIZE, 14, 14 );
        g.setColor( tile.getForeground() );
        final int size = value < 100 ? 36 : value < 1000 ? 32 : 24;
        final Font font = new Font( FONT_NAME, Font.BOLD, size );
        g.setFont( font );

        String s = String.valueOf( value );
        final FontMetrics fm = getFontMetrics( font );

        final int w = fm.stringWidth( s );
        final int h = -(int)fm.getLineMetrics( s, g ).getBaselineOffsets()[2];

        if ( value != 0 )
            g.drawString( s, xOffset + ( TILE_SIZE - w ) / 2, yOffset
                + TILE_SIZE - ( TILE_SIZE - h ) / 2 - 2 );

        //=================================================================
        // Winning/Losing Conditions
        //===================================================================
        if ( myWin || myLose )
        {
            //TODO://edit window GUI
            g.setColor( Color.lightGray ); //sets the background color of the last screen
            g.fillRect( 0, 0, getWidth(), getHeight() );
            g.setColor( Color.white ); //sets the color of the text
            g.setFont( new Font( FONT_NAME, Font.BOLD, 48 ) );
            if ( myWin )
            {
                g.drawString( "You won!", 65, 150 );
            }
            if ( myLose )
            {
                g.drawString( "Game over!", 50 , 130 );
            }
            if ( myWin || myLose )
            {
                g.setFont( new Font( FONT_NAME, Font.ITALIC, 16 ) );
                g.setColor( new Color( 128, 128, 128, 128 ) );
                g.drawString( "Press ESC to play again", 80, getHeight() - 60 );
            }
        }
        g.setFont( new Font( FONT_NAME, Font.PLAIN, 18 ) );
        g.drawString( "Score: " + myScore, getWidth() - 150, getHeight() - 20 );

    }


    private static int offsetCoors( int arg )
    {
        return arg * ( TILES_MARGIN + TILE_SIZE ) + TILES_MARGIN;
    }

}
