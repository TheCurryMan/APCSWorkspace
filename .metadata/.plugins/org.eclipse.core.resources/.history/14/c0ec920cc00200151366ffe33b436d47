import java.awt.Graphics;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import javax.swing.*;



public class GameGrid extends JPanel
{
    private static final String FONT_NAME = "Georgia";
    //font of the numbers of the tiles
    private static final int TILE_SIZE = 64;
    private static final int TILES_MARGIN = 16;
    
    private Tile[] myTiles;
    private MainScene scene;
    
    //==========================================================================
    // Grid
    //==========================================================================

    public GameGrid(MainScene myScene)
    {
        setFocusable( true ); //focusable flag indicates whether a component 
        //can gain the focus if it is requested to do so
        
        scene = myScene;
        
        addKeyListener( new KeyAdapter()
        {
            public void keyPressed( KeyEvent e )
            {
                if ( e.getKeyCode() == KeyEvent.VK_ESCAPE )
                {
                    scene.resetGame(myTiles);
                }
                if ( !canMove() )
                {
                    scene.myLose = true;
                }

                if ( !scene.myWin && !scene.myLose )
                {
                    switch ( e.getKeyCode() )
                    {
                        case KeyEvent.VK_LEFT:
                            left();
                            break;
                        case KeyEvent.VK_RIGHT:
                            right();
                            break;
                        case KeyEvent.VK_DOWN:
                            down();
                            break;
                        case KeyEvent.VK_UP:
                            up();
                            break;
                    }
                }

                if ( !scene.myWin && !canMove() )
                {
                    scene.myLose = true;
                }

                repaint();
            }
        } );
        scene.resetGame(myTiles);
    }
    
    private Tile tileAt( int x, int y )
    {
        return myTiles[x + y * 4];
    }


    public void addTile()
    {
        List<Tile> list = availableSpace();
        if ( !availableSpace().isEmpty() )
        {
            int index = (int)( Math.random() * list.size() ) % list.size();
            Tile emptyTile = list.get( index );
            if (Math.random()< 0.9)
            {
                emptyTile.value = 2;
            }
            else {
                emptyTile.value = 4;
            }
            //emptyTile.value = Math.random() < 0.9 ? 2 : 4;
        }
    }


    private List<Tile> availableSpace()
    {
        final List<Tile> list = new ArrayList<Tile>( 16 );
        for ( Tile t : myTiles )
        {
            if ( t.isEmpty() )
            {
                list.add( t );
            }
        }
        return list;
    }


    /**
     * TODO Write your method description here.
     * @return
     */
    private boolean isFull()
    {
        return availableSpace().size() == 0;
    }


    /**
     * Boolean to see if there are any available moves left
     * @return
     */
    public boolean canMove()
    {
        if ( !isFull() )
        {
            return true;
        }
        //iterates through the entire grid to check the free space
        for ( int x = 0; x < 4; x++ )
        {
            for ( int y = 0; y < 4; y++ )
            {
                Tile t = tileAt( x, y );
                if ( ( x < 3 && t.value == tileAt( x + 1, y ).value )
                    || ( ( y < 3 ) && t.value == tileAt( x, y + 1 ).value ) )
                {
                    return true;
                }
            }
        }
        return false;
    }


    /**
     * TODO Write your method description here.
     * @param line1
     * @param line2
     * @return
     */
    private boolean compare( Tile[] line1, Tile[] line2 )
    {
        if ( line1 == line2 )
        {
            return true;
        }
        else if ( line1.length != line2.length )
        {
            return false;
        }

        for ( int i = 0; i < line1.length; i++ )
        {
            if ( line1[i].value != line2[i].value )
            {
                return false;
            }
        }
        return true;
    }

    
    /**
     * TODO Write your method description here.
     * @param angle
     * @return
     */
    private Tile[] rotate( int angle )
    {
        Tile[] newTiles = new Tile[4 * 4];
        int xoff = 3;
        int yoff = 3;
        if ( angle == 90 )
        {
            yoff = 0;
        }
        else if ( angle == 270 )
        {
            xoff = 0;
        }

        double rad = Math.toRadians( angle );
        int cos = (int)Math.cos( rad );
        int sin = (int)Math.sin( rad );
        for ( int x = 0; x < 4; x++ )
        {
            for ( int y = 0; y < 4; y++ )
            {
                int newX = ( x * cos ) - ( y * sin ) + xoff;
                int newY = ( x * sin ) + ( y * cos ) + yoff;
                newTiles[( newX ) + ( newY ) * 4] = tileAt( x, y );
            }
        }
        return newTiles;
    }
    
    /**
     * TODO Write your method description here.
     * @param oldLine
     * @return
     */
    private Tile[] moveLine( Tile[] oldLine )
    {
        LinkedList<Tile> l = new LinkedList<Tile>();
        for ( int i = 0; i < 4; i++ )
        {
            if ( !oldLine[i].isEmpty() )
                l.addLast( oldLine[i] );
        }
        if ( l.size() == 0 )
        {
            return oldLine;
        }
        else
        {
            Tile[] newLine = new Tile[4];
            ensureSize( l, 4 );
            for ( int i = 0; i < 4; i++ )
            {
                newLine[i] = l.removeFirst();
            }
            return newLine;
        }
    }


    /**
     * TODO Write your method description here.
     * @param oldLine
     * @return
     */
    private Tile[] mergeLine( Tile[] oldLine )
    {
        LinkedList<Tile> list = new LinkedList<Tile>();
        for ( int i = 0; i < 4 && !oldLine[i].isEmpty(); i++ )
        {
            int num = oldLine[i].value;
            if ( i < 3 && oldLine[i].value == oldLine[i + 1].value )
            {
                num *= 2;
                scene.addScore( num );
                int ourTarget = 2048;
                if ( num == ourTarget )
                {
                    scene.myWin = true;
                }
                i++;
            }
            list.add( new Tile( num ) );
        }
        if ( list.size() == 0 )
        {
            return oldLine;
        }
        else
        {
            ensureSize( list, 4 );
            return list.toArray( new Tile[4] );
        }
    }


    /**
     * TODO Write your method description here.
     * @param l
     * @param s
     */
    private static void ensureSize( java.util.List<Tile> l, int s )
    {
        while ( l.size() != s )
        {
            l.add( new Tile() );
        }
    }


    /**
     * TODO Write your method description here.
     * @param index
     * @return
     */
    private Tile[] getLine( int index )
    {
        Tile[] result = new Tile[4];
        for ( int i = 0; i < 4; i++ )
        {
            result[i] = tileAt( i, index );
        }
        return result;
    }


    private void setLine( int index, Tile[] re )
    {
        System.arraycopy( re, 0, myTiles, index * 4, 4 );
    }


    public void paint( Graphics g )
    {
        super.paint( g );
        g.setColor( BG_COLOR );
        g.fillRect( 0, 0, this.getSize().width, this.getSize().height );
        for ( int y = 0; y < 4; y++ )
        {
            for ( int x = 0; x < 4; x++ )
            {
                drawTile( g, myTiles[x + y * 4], x, y );
            }
        }
    }
    
    //==========================================================================
    // Movement
    //==========================================================================
      public void left()
      {
          boolean needAddTile = false;
          for ( int i = 0; i < 4; i++ )
          {
              Tile[] line = getLine( i );
              Tile[] merged = mergeLine( moveLine( line ) );
              setLine( i, merged );
              if ( !needAddTile && !compare( line, merged ) )
              {
                  needAddTile = true;
                  
              }
          }

          if ( needAddTile )
          {
              addTile();
          }
      }


      public void right()
      {
          myTiles = rotate( 180 );
          left();
          myTiles = rotate( 180 );
      }


      public void up()
      {
          myTiles = rotate( 270 );
          left();
          myTiles = rotate( 90 );
      }


      public void down()
      {
          myTiles = rotate( 90 );
          left();
          myTiles = rotate( 270 );
      }
}
