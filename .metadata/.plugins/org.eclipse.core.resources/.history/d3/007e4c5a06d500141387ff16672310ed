import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.regex.*;

import org.junit.*;

import static org.junit.Assert.*;
import junit.framework.JUnit4TestAdapter;


/**
 * 
 * https://courses.cs.washington.edu/courses/cse143/11wi/eclipse-tutorial/junit.
 * shtml SafeTrade tests: TradeOrder PriceComparator Trader Brokerage
 * StockExchange Stock
 *
 * @author TODO Name of principal author
 * @author TODO Name of group member
 * @author TODO Name of group member
 * @version TODO date
 * @author Assignment: JM Chapter 19 - SafeTrade
 * 
 * @author Sources: TODO sources
 *
 */
public class JUSafeTradeTest
{
    // --Test TradeOrder
    /**
     * TradeOrder tests: TradeOrderConstructor - constructs TradeOrder and then
     * compare toString TradeOrderGetTrader - compares value returned to
     * constructed value TradeOrderGetSymbol - compares value returned to
     * constructed value TradeOrderIsBuy - compares value returned to
     * constructed value TradeOrderIsSell - compares value returned to
     * constructed value TradeOrderIsMarket - compares value returned to
     * constructed value TradeOrderIsLimit - compares value returned to
     * constructed value TradeOrderGetShares - compares value returned to
     * constructed value TradeOrderGetPrice - compares value returned to
     * constructed value TradeOrderSubtractShares - subtracts known value &
     * compares result returned by getShares to expected value
     */
    private String symbol = "GGGL";

    private boolean buyOrder = true;

    private boolean marketOrder = true;

    private int numShares = 123;

    private int numToSubtract = 24;

    private double price = 123.45;


    @Test
    public void tradeOrderConstructor()
    {
        TradeOrder to = new TradeOrder( null,
            symbol,
            buyOrder,
            marketOrder,
            numShares,
            price );
        String toStr = to.toString();

        assertTrue( "<< Invalid TradeOrder Constructor >>",
            toStr.contains( "TradeOrder[Trader trader:null" )
                && toStr.contains( "java.lang.String symbol:" + symbol )
                && toStr.contains( "boolean buyOrder:" + buyOrder )
                && toStr.contains( "boolean marketOrder:" + marketOrder )
                && toStr.contains( "int numShares:" + numShares )
                && toStr.contains( "double price:" + price ) );
    }


    @Test
    public void TradeOrderToString()
    {
        TradeOrder to = new TradeOrder( null,
            symbol,
            buyOrder,
            marketOrder,
            numShares,
            price );
        assertNotNull( to.toString() );
    }


    @Test
    public void tradeOrderGetTrader()
    {
        TradeOrder to = new TradeOrder( null,
            symbol,
            buyOrder,
            marketOrder,
            numShares,
            price );
        assertNull( "<< TradeOrder: " + to.getTrader() + " should be null >>",
            to.getTrader() );
    }


    @Test
    public void tradeOrderGetSymbol()
    {
        TradeOrder to = new TradeOrder( null,
            symbol,
            buyOrder,
            marketOrder,
            numShares,
            price );
        assertEquals( "<< TradeOrder: " + to.getTrader() + " should be "
            + symbol + " >>", symbol, to.getSymbol() );
    }


    @Test
    public void tradeOrderIsBuy()
    {
        TradeOrder to = new TradeOrder( null,
            symbol,
            buyOrder,
            marketOrder,
            numShares,
            price );

        assertTrue( "<< TradeOrder: " + to.isBuy() + " should be " + buyOrder
            + " >>", to.isBuy() );
    }


    @Test
    public void tradeOrderIsSell()
    {
        TradeOrder to = new TradeOrder( null,
            symbol,
            buyOrder,
            marketOrder,
            numShares,
            price );
        assertFalse( "<< TradeOrder: " + to.isSell() + " should be "
            + !buyOrder + " >>", to.isSell() );
    }


    @Test
    public void tradeOrderIsMarket()
    {
        TradeOrder to = new TradeOrder( null,
            symbol,
            buyOrder,
            marketOrder,
            numShares,
            price );
        assertTrue( "<< TradeOrder: " + to.isMarket() + " should be "
            + marketOrder + " >>", to.isMarket() );
    }


    @Test
    public void tradeOrderIsLimit()
    {
        TradeOrder to = new TradeOrder( null,
            symbol,
            buyOrder,
            marketOrder,
            numShares,
            price );

        assertFalse( "<< TradeOrder: " + to.isLimit() + " should be "
            + !marketOrder + ">>", to.isLimit() );
    }


    @Test
    public void tradeOrderGetShares()
    {
        TradeOrder to = new TradeOrder( null,
            symbol,
            buyOrder,
            marketOrder,
            numShares,
            price );
        assertTrue( "<< TradeOrder: " + to.getShares() + " should be "
            + numShares + ">>", numShares == to.getShares()
            || ( numShares - numToSubtract ) == to.getShares() );
    }


    @Test
    public void tradeOrderGetPrice()
    {
        TradeOrder to = new TradeOrder( null,
            symbol,
            buyOrder,
            marketOrder,
            numShares,
            price );
        assertEquals( "<< TradeOrder: " + to.getPrice() + " should be " + price
            + ">>", price, to.getPrice(), 0.0 );
    }


    @Test
    public void tradeOrderSubtractShares()
    {
        TradeOrder to = new TradeOrder( null,
            symbol,
            buyOrder,
            marketOrder,
            numShares,
            price );
        to.subtractShares( numToSubtract );
        assertEquals( "<< TradeOrder: subtractShares(" + numToSubtract
            + ") should be " + ( numShares - numToSubtract ) + ">>", numShares
            - numToSubtract, to.getShares() );
    }


    // --Test TraderWindow Stub
    @Test
    public void traderWindowConstructor()
    {
        TraderWindow tw = new TraderWindow( null );
        assertNotNull( tw );
    }


    @Test
    public void traderWindowShowMessage()
    {
        TraderWindow tw = new TraderWindow( null );
        assertNotNull( tw );
        tw.showMessage( null );
    }


    // --Test PriceComparator
    @Test
    public void priceComparatorConstructor()
    {
        PriceComparator pc = new PriceComparator();
        String toStr = pc.toString();

        // assertTrue

    }

    /**
     * Trade tests:
     * 
     * 
     */
    private String screenName = "Username";

    private String password = "Password";

    private Queue<String> mailbox = null;

    private TraderWindow myWindow = null;

    private Trader other = null;

    private TradeOrder order = null;

    private String msg = "message";


    // --Test Trader
    @Test
    public void traderConstructor()
    {
        Trader trader = new Trader( null, screenName, password );
        String toStr = trader.toString();

        assertTrue( "<< Invalid Trader Constructor >>",
            toStr.contains( "Trader[Brokerage brokerage" )
                && toStr.contains( "java.lang.String screenName:" + screenName )
                && toStr.contains( "java.lang.String password:" + password ) );
    }


    @Test
    public void TraderToString()
    {
        Trader trader = new Trader( new Brokerage( new StockExchange() ),
            "Username",
            "Password" );
        assertNotNull( trader.toString() );
    }


    @Test
    public void TraderGetName()
    {
        Trader tr = new Trader( new Brokerage( new StockExchange() ),
            "Username",
            "Password" );
        assertEquals( tr.getName(), "Username" );
    }


    @Test
    public void TraderGetPassword()
    {
        Trader trader = new Trader( new Brokerage( new StockExchange() ),
            "Username",
            "Password" );
        assertEquals( trader.getPassword(), "Password" );
    }


    @Test
    public void TraderReceiveMessage()
    {
        Trader trader = new Trader( new Brokerage( new StockExchange() ),
            "Test",
            "Test" );
        trader.receiveMessage( "Test" );
        assertTrue( trader.hasMessages() );
    }


    // --Test Brokerage
    // TODO your tests here

    // --Test StockExchange

    @Test
    public void StockExchangeGetQuote()
    {
        StockExchange exchange = new StockExchange();
        exchange.listStock( symbol, "name", price );
        assertEquals( "name" + " (" + symbol + ")\nPrice: " + price + "  hi: "
            + price + "  lo: " + price + "  vol: 0\nAsk: none Bid: none",
            exchange.getQuote( symbol ) );
    }


    @Test
    public void StockExchangeListStock()
    {
        StockExchange exchange = new StockExchange();
        exchange.listStock( symbol, "name", price );
        assertEquals( false, exchange.getListedStocks().isEmpty() );
    }


    @Test
    public void StockExchangePlaceOrder()
    {
        StockExchange exchange = new StockExchange();
        Stock gggl = new Stock( symbol, "name", price );
        exchange.listStock( symbol, "name", price );
        Brokerage brokerage = new Brokerage( exchange );
        Trader trader = new Trader( brokerage, "name", "pswd" );
        TradeOrder test = new TradeOrder( trader,
            symbol,
            buyOrder,
            marketOrder,
            numShares,
            price );
        exchange.placeOrder( test );

        assertFalse( gggl.getBuyOrders().isEmpty() );
        assertTrue( trader.hasMessages() );
    }
    
    @Test
    public void StockExchangeToString()
    {
       StockExchange exchange = new StockExchange();
       assertNotNull(exchange.toString());
       
    }

    private String name = "companyName";

    // --Test Stock

    @Test
    public void StockToString()
    {
        Stock stock = new Stock( symbol, "name", price );
        String toStr = stock.toString();
        
        assertTrue( "<< Invalid Stock Constructor >>",
            toStr.contains( "java.lang.String symbol:" + symbol)
                && toStr.contains( "java.lang.String name:" + name )
                && toStr.contains( "double price: " + price ));
    }
    
    @Test
    public void StockGetQuote()
    {
        Stock stock = new Stock( symbol, "name", price );
        assertEquals( stock.getQuote(), "name (" + symbol + ")\nPrice: "
            + price + "  hi: " + price + "  lo: " + price
            + "  vol: 0\nAsk: none Bid: none" );
    }


    @Test
    public void StockPlaceOrder()
    {
        StockExchange exchange = new StockExchange();
        Stock gggl = new Stock( symbol, "name", price );
        exchange.listStock( symbol, "name", price );
        Brokerage brokerage = new Brokerage( exchange );
        Trader trader = new Trader( brokerage, "name", "password" );
        TradeOrder testing = new TradeOrder( trader,
            symbol,
            buyOrder,
            marketOrder,
            numShares,
            price );

        gggl.placeOrder( testing );
        assertEquals( gggl.getBuyOrders().isEmpty(), false );
        assertTrue( trader.hasMessages() );

    }

}

// Remove block comment below to run JUnit test in console
/*
 * public static junit.framework.Test suite() { return new JUnit4TestAdapter(
 * JUSafeTradeTest.class ); }
 * 
 * public static void main( String args[] ) { org.junit.runner.JUnitCore.main(
 * "JUSafeTradeTest" ); }
 */

